syntax = "proto2";

import "lib/common.proto";

message HardwareFluxSourceProto {}

message TestPatternFluxSourceProto {
	optional double interval_us = 1        [default = 4.0, (help) = "interval between pulses"];
	optional double sequence_length_us = 2 [default = 200.0, (help) = "length of test sequence"];
}

message EraseFluxSourceProto {}

message KryofluxFluxSourceProto {
	optional string directory = 1 [(help) = "path to Kryoflux stream directory"];
}

message ScpFluxSourceProto {
	optional string filename = 1 [default = "flux.scp",
		(help) = ".scp file to read flux from"];
}

message A2rFluxSourceProto {
	optional string filename = 1 [default = "flux.a2r",
		(help) = ".a2r file to read flux from"];
}

message CwfFluxSourceProto {
	optional string filename = 1 [default = "flux.cwf",
		(help) = ".cwf file to read flux from"];
}

message Fl2FluxSourceProto {
	optional string filename = 1 [default = "flux.fl2",
		(help) = ".fl2 file to read flux from"];
}

message FlxFluxSourceProto {
	optional string directory = 1 [(help) = "path to FLX stream directory"];
}

// NEXT: 12
message FluxSourceProto {
	enum FluxSourceType {
		NOT_SET = 0;
		DRIVE = 1;
		TEST_PATTERN = 2;
		ERASE = 3;
		KRYOFLUX = 4;
		SCP = 5;
		CWF = 6;
		FLUX = 7;
		FLX = 8;
		A2R = 9;
	}

	optional FluxSourceType type = 9 [default = NOT_SET, (help) = "flux source type"];

	optional A2rFluxSourceProto a2r = 11;
	optional CwfFluxSourceProto cwf = 7;
	optional EraseFluxSourceProto erase = 4;
	optional Fl2FluxSourceProto fl2 = 8;
	optional FlxFluxSourceProto flx = 10;
	optional HardwareFluxSourceProto drive = 2;
	optional KryofluxFluxSourceProto kryoflux = 5;
	optional ScpFluxSourceProto scp = 6;
	optional TestPatternFluxSourceProto test_pattern = 3;
}

